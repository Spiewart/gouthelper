### This is a workflow template for deploying a Django application on DigitalOcean using Docker Compose
### and GitHub Actions. IT DOES NOT WORK. PLEASE PROVIDE FEEDBACK ON HOW I CAN DEPLOY A NESTED DOCKER
### COMPOSE FOLDER WITH DOCKER IMAGES.
### It is based on the following tutorial: https://testdriven.io/blog/deploying-django-to-digitalocean-with-docker-compose/
name: CD

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1
  # Set global variables for the images
  GOUTHELPER_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/gouthelper
  TRAEFIK_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/traefik
  POSTGRES_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/postgres
  AWSCLI_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/awscli

on:
  pull_request:
    branches: ['master', 'main']
    paths-ignore: ['docs/**']

  push:
    branches: ['master', 'main']
    paths-ignore: ['docs/**']

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  quality-assurance:
    name: Quality Assurance
    uses: ./.github/workflows/ci.yml

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4
      - name: Set environment variables
        run: |
          echo "GOUTHELPER_IMAGE=$(echo ${{ env.GOUTHELPER_IMAGE }} )" >> $GITHUB_ENV
          echo "TRAEFIK_IMAGE=$(echo ${{ env.TRAEFIK_IMAGE }} )" >> $GITHUB_ENV
          echo "POSTGRES_IMAGE=$(echo ${{ env.POSTGRES_IMAGE }} )" >> $GITHUB_ENV
          echo "AWSCLI_IMAGE=$(echo ${{ env.AWSCLI_IMAGE }} )" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.GOUTHELPER_IMAGE }} || true
          docker pull ${{ env.TRAEFIK_IMAGE }} || true
          docker pull ${{ env.POSTGRES_IMAGE }} || true
          docker pull ${{ env.AWSCLI_IMAGE }} || true
      - name: Build images
        run: |
          docker compose -f production.yml build
      - name: Tag images
        run: |
          docker tag gouthelper_production_django ${{ env.GOUTHELPER_IMAGE }}:latest
          docker tag gouthelper_production_traefik ${{ env.TRAEFIK_IMAGE }}:latest
          docker tag gouthelper_production_postgres ${{ env.POSTGRES_IMAGE }}:latest
          docker tag gouthelper-awscli ${{ env.AWSCLI_IMAGE }}:latest
      - name: Push images
        run: |
          docker push ${{ env.GOUTHELPER_IMAGE }}
          docker push ${{ env.TRAEFIK_IMAGE }}
          docker push ${{ env.POSTGRES_IMAGE }}
          docker push ${{ env.AWSCLI_IMAGE }}

  deploy:
    name: Deploy to DigitalOcean
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
      - name: Add environment variables to .env
        run: |
          echo "GOUTHELPER_IMAGE=$(echo ${{ env.GOUTHELPER_IMAGE }} )" >> .env
          echo "TRAEFIK_IMAGE=$(echo ${{ env.TRAEFIK_IMAGE }} )" >> .env
          echo "POSTGRES_IMAGE=$(echo ${{ env.POSTGRES_IMAGE }} )" >> .env
          echo "AWSCLI_IMAGE=$(echo ${{ env.AWSCLI_IMAGE }} )" >> .env
          echo NAMESPACE=${{ secrets.NAMESPACE }} >> .env
          echo PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .env
      - name: Create and populate .envs/.production/.django and .envs/.production/.postgres
        run: |
          mkdir -p .envs/.production
          echo "${{ secrets.POSTGRES_DB }}" >> .envs/.production/.postgres
          echo "${{ secrets.POSTGRES_HOST }}" >> .envs/.production/.postgres
          echo "${{ secrets.POSTGRES_PASSWORD }}" >> .envs/.production/.postgres
          echo "${{ secrets.POSTGRES_PORT }}" >> .envs/.production/.postgres
          echo "${{ secrets.POSTGRES_USER }}" >> .envs/.production/.postgres
          echo "${{ secrets.DJANGO_READ_DOT_ENV_FILE }}" >> .envs/.production/.django
          echo "${{ secrets.DJANGO_SETTINGS_MODULE }}" >> .envs/.production/.django
          echo "${{ secrets.DJANGO_SECRET_KEY }}" >> .envs/.production/.django
          echo "${{ secrets.DJANGO_ADMIN_URL }}" >> .envs/.production/.django
          echo "${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .envs/.production/.django
          echo "${{ secrets.DJANGO_SECURE_SSL_REDIRECT }}" >> .envs/.production/.django
          echo "${{ secrets.CORRESPONDANCE_EMAIL }}" >> .envs/.production/.django
          echo "${{ secrets.MAILGUN_API_KEY }}" >> .envs/.production/.django
          echo "${{ secrets.MAILGUN_DOMAIN }}" >> .envs/.production/.django
          echo "${{ secrets.DJANGO_AWS_ACCESS_KEY_ID }}" >> .envs/.production/.django
          echo "${{ secrets.DJANGO_AWS_SECRET_ACCESS_KEY }}" >> .envs/.production/.django
          echo "${{ secrets.DJANGO_AWS_STORAGE_BUCKET_NAME }}" >> .envs/.production/.django
          echo "${{ secrets.DJANGO_ACCOUNT_ALLOW_REGISTRATION }}" >> .envs/.production/.django
          echo "${{ secrets.WEB_CONCURRENCY }}" >> .envs/.production/.django
          echo "${{ secrets.SENTRY_DSN }}" >> .envs/.production/.django
          echo "${{ secrets.REDIS_URL }}" >> .envs/.production/.django
          echo "${{ secrets.RECAPTCHA_PUBLIC_KEY }}" >> .envs/.production/.django
          echo "${{ secrets.RECAPTCHA_PRIVATE_KEY }}" >> .envs/.production/.django

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"
      - name: Build and deploy images on DigitalOcean
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -o StrictHostKeyChecking=no -r ./.env ./production.yml ./.envs/.production root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }}:/gouthelper
          ssh -o StrictHostKeyChecking=no root@${{ secrets.DIGITAL_OCEAN_IP_ADDRESS }} << 'ENDSSH'
            cd /gouthelper
            source .env
            docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN
            git fetch
            docker pull $GOUTHELPER_IMAGE
            docker pull $TRAEFIK_IMAGE
            docker pull $POSTGRES_IMAGE
            docker pull $AWSCLI_IMAGE
            docker compose -f production.yml down
            docker compose -f production.yml up -d
          ENDSSH
