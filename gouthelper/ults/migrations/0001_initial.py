# Generated by Django 4.2.6 on 2023-11-04 20:11

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import rules.contrib.models
import simple_history.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("dateofbirths", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("medhistorys", "0001_initial"),
        ("genders", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Ult",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "freq_flares",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "One or less"), (2, "Two or more")],
                        help_text="How many gout flares to you have per year?",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                        verbose_name="Flares per Year",
                    ),
                ),
                (
                    "indication",
                    models.IntegerField(
                        choices=[(0, "Not Indicated"), (1, "Conditionally Indicated"), (2, "Indicated")],
                        default=0,
                        help_text="Does the patient have an indication for ULT?",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                        verbose_name="Indication",
                    ),
                ),
                (
                    "num_flares",
                    models.IntegerField(
                        choices=[(0, "Zero"), (1, "One"), (2, "Two or more")],
                        help_text="How many gout flares have you had?",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                        verbose_name="Total Number of Flares",
                    ),
                ),
                (
                    "dateofbirth",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="dateofbirths.dateofbirth",
                    ),
                ),
                (
                    "gender",
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to="genders.gender"
                    ),
                ),
                ("medhistorys", models.ManyToManyField(to="medhistorys.medhistory")),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalUlt",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "freq_flares",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "One or less"), (2, "Two or more")],
                        help_text="How many gout flares to you have per year?",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                        verbose_name="Flares per Year",
                    ),
                ),
                (
                    "indication",
                    models.IntegerField(
                        choices=[(0, "Not Indicated"), (1, "Conditionally Indicated"), (2, "Indicated")],
                        default=0,
                        help_text="Does the patient have an indication for ULT?",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                        verbose_name="Indication",
                    ),
                ),
                (
                    "num_flares",
                    models.IntegerField(
                        choices=[(0, "Zero"), (1, "One"), (2, "Two or more")],
                        help_text="How many gout flares have you had?",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                        verbose_name="Total Number of Flares",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "dateofbirth",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="dateofbirths.dateofbirth",
                    ),
                ),
                (
                    "gender",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="genders.gender",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical ult",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddConstraint(
            model_name="ult",
            constraint=models.CheckConstraint(
                check=models.Q(("num_flares__in", [0, 1, 2])), name="ults_ult_num_flares_valid"
            ),
        ),
        migrations.AddConstraint(
            model_name="ult",
            constraint=models.CheckConstraint(
                check=models.Q(("freq_flares__in", [1, 2])), name="ults_ult_freq_flares_valid"
            ),
        ),
        migrations.AddConstraint(
            model_name="ult",
            constraint=models.CheckConstraint(
                check=models.Q(("indication__in", [0, 1, 2])), name="ults_ult_indication_valid"
            ),
        ),
        migrations.AddConstraint(
            model_name="ult",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("num_flares", 2), ("freq_flares__isnull", False)),
                    models.Q(("num_flares", 1), ("freq_flares__isnull", True)),
                    models.Q(("num_flares", 0), ("freq_flares__isnull", True)),
                    _connector="OR",
                ),
                name="ults_ult_freq_num_flares_valid",
            ),
        ),
    ]
