# Generated by Django 4.2.6 on 2023-12-05 19:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("blog", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="historicalblogtag",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalblogpost",
            name="author",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalblogpost",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="blogpost",
            name="author",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="blogposts", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="blogpost",
            name="tags",
            field=models.ManyToManyField(blank=True, related_name="posts", to="blog.blogtag"),
        ),
        migrations.AddConstraint(
            model_name="blogpost",
            constraint=models.UniqueConstraint(fields=("title",), name="blog_blogpost_unique_title"),
        ),
        migrations.AddConstraint(
            model_name="blogpost",
            constraint=models.CheckConstraint(
                check=models.Q(("status__in", ["draft", "published", "archived"])), name="blog_blogpost_valid_status"
            ),
        ),
    ]
