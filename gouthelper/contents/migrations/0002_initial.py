# Generated by Django 4.2.6 on 2023-12-05 19:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("contents", "0001_initial"),
    ]

    operations = [
        migrations.AddField(
            model_name="historicalcontent",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddConstraint(
            model_name="content",
            constraint=models.UniqueConstraint(
                fields=("context", "slug", "tag"), name="contents_content_unique_slug_tag_context"
            ),
        ),
        migrations.AddConstraint(
            model_name="content",
            constraint=models.UniqueConstraint(
                condition=models.Q(("context__isnull", True), ("tag__isnull", True)),
                fields=("slug",),
                name="contents_content_unique_slug_no_tag_context",
            ),
        ),
        migrations.AddConstraint(
            model_name="content",
            constraint=models.UniqueConstraint(
                condition=models.Q(("tag__isnull", True)),
                fields=("slug", "context"),
                name="contents_content_unique_slug_context_no_tag",
            ),
        ),
        migrations.AddConstraint(
            model_name="content",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "context__in",
                        ["FLARE", "FLAREAID", "GOALURATE", "LAB", "PPX", "PPXAID", "TREATMENT", "ULT", "ULTAID"],
                    )
                ),
                name="contents_content_valid_context",
            ),
        ),
        migrations.AddConstraint(
            model_name="content",
            constraint=models.CheckConstraint(
                check=models.Q(("tag__in", ["explanation", "warning"])), name="contents_content_valid_tag"
            ),
        ),
    ]
