# Generated by Django 4.2.6 on 2024-07-29 15:15

import datetime
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("ultaids", "0001_initial"),
        ("flareaids", "0002_initial"),
        ("defaults", "0002_initial"),
        ("ppxaids", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="ultaidsettings",
            name="user",
            field=models.OneToOneField(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="ppxaidsettings",
            name="ppxaid",
            field=models.OneToOneField(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="ppxaids.ppxaid"
            ),
        ),
        migrations.AddField(
            model_name="ppxaidsettings",
            name="user",
            field=models.OneToOneField(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalultaidsettings",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalultaidsettings",
            name="ultaid",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ultaids.ultaid",
            ),
        ),
        migrations.AddField(
            model_name="historicalultaidsettings",
            name="user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalppxaidsettings",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalppxaidsettings",
            name="ppxaid",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="ppxaids.ppxaid",
            ),
        ),
        migrations.AddField(
            model_name="historicalppxaidsettings",
            name="user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicalflareaidsettings",
            name="flareaid",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to="flareaids.flareaid",
            ),
        ),
        migrations.AddField(
            model_name="historicalflareaidsettings",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicalflareaidsettings",
            name="user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="historicaldefaulttrt",
            name="history_user",
            field=models.ForeignKey(
                null=True, on_delete=django.db.models.deletion.SET_NULL, related_name="+", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="historicaldefaulttrt",
            name="user",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="flareaidsettings",
            name="flareaid",
            field=models.OneToOneField(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to="flareaids.flareaid"
            ),
        ),
        migrations.AddField(
            model_name="flareaidsettings",
            name="user",
            field=models.OneToOneField(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="defaulttrt",
            name="user",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="defaultmedhistory",
            name="user",
            field=models.ForeignKey(
                blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddConstraint(
            model_name="ultaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("dose_adj_interval__lte", datetime.timedelta(days=84)),
                    ("dose_adj_interval__gte", datetime.timedelta(days=14)),
                ),
                name="defaults_ultaidsettings_dose_adj_interval_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="ultaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "febu_ckd_initial_dose__in",
                        [Decimal("20"), Decimal("40"), Decimal("60"), Decimal("80"), Decimal("100"), Decimal("120")],
                    )
                ),
                name="defaults_ultaidsettings_initial_febuxostat_dose_ckd",
            ),
        ),
        migrations.AddConstraint(
            model_name="ultaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(("prob_ckd_stage_contra__in", [None, 1, 2, 3, 4, 5])),
                name="defaults_ultaidsettings_prob_ckd_contra_stage_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="ultaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("user__isnull", False), ("ultaid__isnull", True)),
                    models.Q(("user__isnull", True), ("ultaid__isnull", False)),
                    models.Q(("user__isnull", True), ("ultaid__isnull", True)),
                    _connector="OR",
                ),
                name="defaults_ultaidsettings_user_ultaid_exclusive",
            ),
        ),
        migrations.AddConstraint(
            model_name="ppxaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "ppxtrt1__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_ppxaidsettings_ppxtrt1_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="ppxaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "ppxtrt2__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_ppxaidsettings_ppxtrt2_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="ppxaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "ppxtrt3__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_ppxaidsettings_ppxtrt3_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="ppxaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "ppxtrt4__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_ppxaidsettings_ppxtrt4_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="ppxaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "ppxtrt5__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_ppxaidsettings_ppxtrt5_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="ppxaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("user__isnull", False), ("ppxaid__isnull", True)),
                    models.Q(("user__isnull", True), ("ppxaid__isnull", False)),
                    models.Q(("user__isnull", True), ("ppxaid__isnull", True)),
                    _connector="OR",
                ),
                name="defaults_ppxaidsettings_user_ppxaid_exclusive",
            ),
        ),
        migrations.AddConstraint(
            model_name="flareaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "flaretrt1__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_flareaidsettings_flaretrt1_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="flareaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "flaretrt2__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_flareaidsettings_flaretrt2_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="flareaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "flaretrt3__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_flareaidsettings_flaretrt3_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="flareaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "flaretrt4__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_flareaidsettings_flaretrt4_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="flareaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "flaretrt5__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_flareaidsettings_flaretrt5_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="flareaidsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("user__isnull", False), ("flareaid__isnull", True)),
                    models.Q(("user__isnull", True), ("flareaid__isnull", False)),
                    models.Q(("user__isnull", True), ("flareaid__isnull", True)),
                    _connector="OR",
                ),
                name="defaults_flareaidsettings_user_flareaid_exclusive",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "treatment__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaulttrt_treatment_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(("trttype__in", [0, 1, 2])), name="defaults_defaulttrt_trttype_valid"
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("treatment", "ALLOPURINOL"), ("trttype", 0)),
                    models.Q(("treatment", "FEBUXOSTAT"), ("trttype", 0)),
                    models.Q(("treatment", "PROBENECID"), ("trttype", 0)),
                    models.Q(("treatment", "CELECOXIB"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "COLCHICINE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "DICLOFENAC"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "IBUPROFEN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "INDOMETHACIN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "MELOXICAM"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(
                        ("treatment", "METHYLPREDNISOLONE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")
                    ),
                    models.Q(("treatment", "NAPROXEN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "PREDNISONE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_trttype_treatment_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.UniqueConstraint(
                fields=("user", "treatment", "trttype"), name="defaults_defaulttrt_user_trt"
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.UniqueConstraint(
                condition=models.Q(("user__isnull", True)),
                fields=("treatment", "trttype"),
                name="defaults_defaulttrt_gouthelper_default",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("freq__in", ["BID", "BIW", "ONCE", "QDAY", "QID", "QOTHERDAY", "QWEEK", "TID", "TIW"])
                ),
                name="defaults_defaulttrt_freq_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("freq2__in", ["BID", "BIW", "ONCE", "QDAY", "QID", "QOTHERDAY", "QWEEK", "TID", "TIW"]),
                    ("freq2", None),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_freq2_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("freq3__in", ["BID", "BIW", "ONCE", "QDAY", "QID", "QOTHERDAY", "QWEEK", "TID", "TIW"]),
                    ("freq3", None),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_freq3_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(models.Q(("trttype", 0), ("trttype", 2), _connector="OR"), ("duration", None)),
                    models.Q(("trttype", 1), models.Q(("duration", None), _negated=True)),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_duration_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(models.Q(("trttype", 0), ("trttype", 2), _connector="OR"), ("duration2", None)),
                    ("trttype", 1),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_duration2_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(models.Q(("trttype", 0), ("trttype", 2), _connector="OR"), ("duration3", None)),
                    ("trttype", 1),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_duration3_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("dose__lte", models.F("max_dose")),
                    models.Q(("dose2__lte", models.F("max_dose")), ("dose2", None), _connector="OR"),
                    models.Q(("dose3__lte", models.F("max_dose")), ("dose3", None), _connector="OR"),
                ),
                name="defaults_defaulttrt_doses_under_max_dose",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("treatment", "ALLOPURINOL"),
                        (
                            "dose__in",
                            [
                                Decimal("50"),
                                Decimal("100"),
                                Decimal("150"),
                                Decimal("200"),
                                Decimal("250"),
                                Decimal("300"),
                                Decimal("350"),
                                Decimal("400"),
                                Decimal("450"),
                                Decimal("500"),
                                Decimal("550"),
                                Decimal("600"),
                                Decimal("650"),
                                Decimal("700"),
                                Decimal("750"),
                                Decimal("800"),
                            ],
                        ),
                        models.Q(
                            (
                                "dose2__in",
                                [
                                    Decimal("50"),
                                    Decimal("100"),
                                    Decimal("150"),
                                    Decimal("200"),
                                    Decimal("250"),
                                    Decimal("300"),
                                    Decimal("350"),
                                    Decimal("400"),
                                    Decimal("450"),
                                    Decimal("500"),
                                    Decimal("550"),
                                    Decimal("600"),
                                    Decimal("650"),
                                    Decimal("700"),
                                    Decimal("750"),
                                    Decimal("800"),
                                ],
                            ),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            (
                                "dose3__in",
                                [
                                    Decimal("50"),
                                    Decimal("100"),
                                    Decimal("150"),
                                    Decimal("200"),
                                    Decimal("250"),
                                    Decimal("300"),
                                    Decimal("350"),
                                    Decimal("400"),
                                    Decimal("450"),
                                    Decimal("500"),
                                    Decimal("550"),
                                    Decimal("600"),
                                    Decimal("650"),
                                    Decimal("700"),
                                    Decimal("750"),
                                    Decimal("800"),
                                ],
                            ),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        (
                            "dose_adj__in",
                            [
                                Decimal("50"),
                                Decimal("100"),
                                Decimal("150"),
                                Decimal("200"),
                                Decimal("250"),
                                Decimal("300"),
                                Decimal("350"),
                                Decimal("400"),
                                Decimal("450"),
                                Decimal("500"),
                                Decimal("550"),
                                Decimal("600"),
                                Decimal("650"),
                                Decimal("700"),
                                Decimal("750"),
                                Decimal("800"),
                            ],
                        ),
                        (
                            "max_dose__in",
                            [
                                Decimal("50"),
                                Decimal("100"),
                                Decimal("150"),
                                Decimal("200"),
                                Decimal("250"),
                                Decimal("300"),
                                Decimal("350"),
                                Decimal("400"),
                                Decimal("450"),
                                Decimal("500"),
                                Decimal("550"),
                                Decimal("600"),
                                Decimal("650"),
                                Decimal("700"),
                                Decimal("750"),
                                Decimal("800"),
                            ],
                        ),
                    ),
                    models.Q(
                        ("treatment", "CELECOXIB"),
                        ("dose__in", [Decimal("200"), Decimal("400")]),
                        models.Q(("dose2__in", [Decimal("200"), Decimal("400")]), ("dose2", None), _connector="OR"),
                        models.Q(("dose3__in", [Decimal("200"), Decimal("400")]), ("dose3", None), _connector="OR"),
                        ("dose_adj__in", [Decimal("200"), Decimal("400")]),
                        ("max_dose__in", [Decimal("200"), Decimal("400")]),
                    ),
                    models.Q(
                        ("treatment", "COLCHICINE"),
                        ("dose__in", [Decimal("0.3"), Decimal("0.6"), Decimal("1.2")]),
                        models.Q(
                            ("dose2__in", [Decimal("0.3"), Decimal("0.6"), Decimal("1.2")]),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            ("dose3__in", [Decimal("0.3"), Decimal("0.6"), Decimal("1.2")]),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        ("dose_adj__in", [Decimal("0.3"), Decimal("0.6"), Decimal("1.2")]),
                        ("max_dose__in", [Decimal("0.3"), Decimal("0.6"), Decimal("1.2")]),
                    ),
                    models.Q(
                        ("treatment", "DICLOFENAC"),
                        ("dose__in", [Decimal("25"), Decimal("50"), Decimal("75"), Decimal("100"), Decimal("150")]),
                        models.Q(
                            (
                                "dose2__in",
                                [Decimal("25"), Decimal("50"), Decimal("75"), Decimal("100"), Decimal("150")],
                            ),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            (
                                "dose3__in",
                                [Decimal("25"), Decimal("50"), Decimal("75"), Decimal("100"), Decimal("150")],
                            ),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        (
                            "dose_adj__in",
                            [Decimal("25"), Decimal("50"), Decimal("75"), Decimal("100"), Decimal("150")],
                        ),
                        (
                            "max_dose__in",
                            [Decimal("25"), Decimal("50"), Decimal("75"), Decimal("100"), Decimal("150")],
                        ),
                    ),
                    models.Q(
                        ("treatment", "FEBUXOSTAT"),
                        (
                            "dose__in",
                            [
                                Decimal("20"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                                Decimal("100"),
                                Decimal("120"),
                            ],
                        ),
                        models.Q(
                            (
                                "dose2__in",
                                [
                                    Decimal("20"),
                                    Decimal("40"),
                                    Decimal("60"),
                                    Decimal("80"),
                                    Decimal("100"),
                                    Decimal("120"),
                                ],
                            ),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            (
                                "dose3__in",
                                [
                                    Decimal("20"),
                                    Decimal("40"),
                                    Decimal("60"),
                                    Decimal("80"),
                                    Decimal("100"),
                                    Decimal("120"),
                                ],
                            ),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        (
                            "dose_adj__in",
                            [
                                Decimal("20"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                                Decimal("100"),
                                Decimal("120"),
                            ],
                        ),
                        (
                            "max_dose__in",
                            [
                                Decimal("20"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                                Decimal("100"),
                                Decimal("120"),
                            ],
                        ),
                    ),
                    models.Q(
                        ("treatment", "IBUPROFEN"),
                        ("dose__in", [Decimal("200"), Decimal("400"), Decimal("600"), Decimal("800")]),
                        models.Q(
                            ("dose2__in", [Decimal("200"), Decimal("400"), Decimal("600"), Decimal("800")]),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            ("dose3__in", [Decimal("200"), Decimal("400"), Decimal("600"), Decimal("800")]),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        ("dose_adj__in", [Decimal("200"), Decimal("400"), Decimal("600"), Decimal("800")]),
                        ("max_dose__in", [Decimal("200"), Decimal("400"), Decimal("600"), Decimal("800")]),
                    ),
                    models.Q(
                        ("treatment", "INDOMETHACIN"),
                        ("dose__in", [Decimal("25"), Decimal("50")]),
                        models.Q(("dose2__in", [Decimal("25"), Decimal("50")]), ("dose2", None), _connector="OR"),
                        models.Q(("dose3__in", [Decimal("25"), Decimal("50")]), ("dose3", None), _connector="OR"),
                        ("dose_adj__in", [Decimal("25"), Decimal("50")]),
                        ("max_dose__in", [Decimal("25"), Decimal("50")]),
                    ),
                    models.Q(
                        ("treatment", "MELOXICAM"),
                        ("dose__in", [Decimal("7.5"), Decimal("15")]),
                        models.Q(("dose2__in", [Decimal("7.5"), Decimal("15")]), ("dose2", None), _connector="OR"),
                        models.Q(("dose3__in", [Decimal("7.5"), Decimal("15")]), ("dose3", None), _connector="OR"),
                        ("dose_adj__in", [Decimal("7.5"), Decimal("15")]),
                        ("max_dose__in", [Decimal("7.5"), Decimal("15")]),
                    ),
                    models.Q(
                        ("treatment", "METHYLPREDNISOLONE"),
                        (
                            "dose__in",
                            [
                                Decimal("4"),
                                Decimal("8"),
                                Decimal("16"),
                                Decimal("20"),
                                Decimal("24"),
                                Decimal("32"),
                                Decimal("40"),
                                Decimal("80"),
                            ],
                        ),
                        models.Q(
                            (
                                "dose2__in",
                                [
                                    Decimal("4"),
                                    Decimal("8"),
                                    Decimal("16"),
                                    Decimal("20"),
                                    Decimal("24"),
                                    Decimal("32"),
                                    Decimal("40"),
                                    Decimal("80"),
                                ],
                            ),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            (
                                "dose3__in",
                                [
                                    Decimal("4"),
                                    Decimal("8"),
                                    Decimal("16"),
                                    Decimal("20"),
                                    Decimal("24"),
                                    Decimal("32"),
                                    Decimal("40"),
                                    Decimal("80"),
                                ],
                            ),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        (
                            "dose_adj__in",
                            [
                                Decimal("4"),
                                Decimal("8"),
                                Decimal("16"),
                                Decimal("20"),
                                Decimal("24"),
                                Decimal("32"),
                                Decimal("40"),
                                Decimal("80"),
                            ],
                        ),
                        (
                            "max_dose__in",
                            [
                                Decimal("4"),
                                Decimal("8"),
                                Decimal("16"),
                                Decimal("20"),
                                Decimal("24"),
                                Decimal("32"),
                                Decimal("40"),
                                Decimal("80"),
                            ],
                        ),
                    ),
                    models.Q(
                        ("treatment", "NAPROXEN"),
                        ("dose__in", [Decimal("220"), Decimal("250"), Decimal("440"), Decimal("500")]),
                        models.Q(
                            ("dose2__in", [Decimal("220"), Decimal("250"), Decimal("440"), Decimal("500")]),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            ("dose3__in", [Decimal("220"), Decimal("250"), Decimal("440"), Decimal("500")]),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        ("dose_adj__in", [Decimal("220"), Decimal("250"), Decimal("440"), Decimal("500")]),
                        ("max_dose__in", [Decimal("220"), Decimal("250"), Decimal("440"), Decimal("500")]),
                    ),
                    models.Q(
                        ("treatment", "PREDNISONE"),
                        (
                            "dose__in",
                            [
                                Decimal("2.5"),
                                Decimal("5"),
                                Decimal("10"),
                                Decimal("15"),
                                Decimal("20"),
                                Decimal("30"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                            ],
                        ),
                        models.Q(
                            (
                                "dose2__in",
                                [
                                    Decimal("2.5"),
                                    Decimal("5"),
                                    Decimal("10"),
                                    Decimal("15"),
                                    Decimal("20"),
                                    Decimal("30"),
                                    Decimal("40"),
                                    Decimal("60"),
                                    Decimal("80"),
                                ],
                            ),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            (
                                "dose3__in",
                                [
                                    Decimal("2.5"),
                                    Decimal("5"),
                                    Decimal("10"),
                                    Decimal("15"),
                                    Decimal("20"),
                                    Decimal("30"),
                                    Decimal("40"),
                                    Decimal("60"),
                                    Decimal("80"),
                                ],
                            ),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        (
                            "dose_adj__in",
                            [
                                Decimal("2.5"),
                                Decimal("5"),
                                Decimal("10"),
                                Decimal("15"),
                                Decimal("20"),
                                Decimal("30"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                            ],
                        ),
                        (
                            "max_dose__in",
                            [
                                Decimal("2.5"),
                                Decimal("5"),
                                Decimal("10"),
                                Decimal("15"),
                                Decimal("20"),
                                Decimal("30"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                            ],
                        ),
                    ),
                    models.Q(
                        ("treatment", "PROBENECID"),
                        ("dose__in", [Decimal("250"), Decimal("500"), Decimal("750"), Decimal("1000")]),
                        models.Q(
                            ("dose2__in", [Decimal("250"), Decimal("500"), Decimal("750"), Decimal("1000")]),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            ("dose3__in", [Decimal("250"), Decimal("500"), Decimal("750"), Decimal("1000")]),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        ("dose_adj__in", [Decimal("250"), Decimal("500"), Decimal("750"), Decimal("1000")]),
                        ("max_dose__in", [Decimal("250"), Decimal("500"), Decimal("750"), Decimal("1000")]),
                    ),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_dosing_check",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.UniqueConstraint(
                fields=("user", "contraindication", "medhistorytype", "treatment", "trttype"),
                name="defaults_defaultmedhistory_unique_user_default",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.UniqueConstraint(
                condition=models.Q(("user__isnull", True)),
                fields=("contraindication", "medhistorytype", "treatment", "trttype"),
                name="defaults_defaultmedhistory_gouthelper_default",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.CheckConstraint(
                check=models.Q(("contraindication__in", [0, 1, 2])),
                name="defaults_defaultmedhistory_contraindication_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "medhistorytype__in",
                        [
                            "ANGINA",
                            "ANTICOAGULATION",
                            "BLEED",
                            "CAD",
                            "CHF",
                            "CKD",
                            "COLCHICINEINTERACTION",
                            "DIABETES",
                            "EROSIONS",
                            "GASTRICBYPASS",
                            "GOUT",
                            "HEARTATTACK",
                            "HEPATITIS",
                            "HYPERTENSION",
                            "HYPERURICEMIA",
                            "IBD",
                            "MENOPAUSE",
                            "ORGANTRANSPLANT",
                            "OSTEOPOROSIS",
                            "PUD",
                            "PVD",
                            "STROKE",
                            "TOPHI",
                            "URATESTONES",
                            "XOIINTERACTION",
                        ],
                    )
                ),
                name="defaults_defaultmedhistory_medhistorytype_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "treatment__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultmedhistory_treatment_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.CheckConstraint(
                check=models.Q(("trttype__in", [0, 1, 2])), name="defaults_defaultmedhistory_trttype_valid"
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("treatment", "ALLOPURINOL"), ("trttype", 0)),
                    models.Q(("treatment", "FEBUXOSTAT"), ("trttype", 0)),
                    models.Q(("treatment", "PROBENECID"), ("trttype", 0)),
                    models.Q(("treatment", "CELECOXIB"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "COLCHICINE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "DICLOFENAC"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "IBUPROFEN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "INDOMETHACIN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "MELOXICAM"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(
                        ("treatment", "METHYLPREDNISOLONE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")
                    ),
                    models.Q(("treatment", "NAPROXEN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "PREDNISONE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    _connector="OR",
                ),
                name="defaults_defaultmedhistory_trttype_treatment_valid",
            ),
        ),
    ]
