# Generated by Django 4.2.6 on 2023-11-04 20:11

import datetime
from decimal import Decimal
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import rules.contrib.models
import simple_history.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="HistoricalDefaultUltTrtSettings",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "allo_ckd_fixed_dose",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use fixed dose allopurinol in CKD?",
                        verbose_name="Allopurinol CKD Fixed Dose",
                    ),
                ),
                (
                    "allo_dialysis",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use allopurinol in dialysis?",
                        verbose_name="Allopurinol in Dialysis",
                    ),
                ),
                (
                    "allo_no_ethnicity_no_hlab5801",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use allopurinol without knowing ethnicity and HLA-B*5801?",
                        verbose_name="Allopurinol / without ethnicity / HLA-B*5801",
                    ),
                ),
                (
                    "allo_risk_ethnicity_no_hlab5801",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Use allopurinol in high risk ethnicity without HLA-B*5801?",
                        verbose_name="Allopurinol / high risk ethnicity / no HLA-B*5801",
                    ),
                ),
                (
                    "febu_ckd_initial_dose",
                    models.DecimalField(
                        decimal_places=1,
                        default=Decimal("20"),
                        help_text="What is initial febuxostat dose in CKD?",
                        max_digits=5,
                        verbose_name="Initial Febuxostat CKD Dose",
                    ),
                ),
                (
                    "febu_cv_disease",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use febuxostat in the setting of cardiovascular disease?",
                        verbose_name="Febuxostat with cardiovascular disease?",
                    ),
                ),
                (
                    "prob_ckd_stage_contra",
                    models.IntegerField(
                        choices=[(None, "----"), (1, "I"), (2, "II"), (3, "III"), (4, "IV"), (5, "V")],
                        default=3,
                        help_text="What is the CKD stage at which probenecid is contraindicated?",
                        verbose_name="Probenecid CKD Stage Contraindication",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical default ult trt settings",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDefaultTrt",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "trttype",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Urate-lowering therapy"), (1, "Flare"), (2, "Prophylaxis")],
                        help_text="What type of gout medication is this?",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                        verbose_name="Treatment Type",
                    ),
                ),
                (
                    "treatment",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="Treatment",
                    ),
                ),
                (
                    "dose",
                    models.DecimalField(
                        decimal_places=1, help_text="What is the dose?", max_digits=5, verbose_name="Dose"
                    ),
                ),
                (
                    "dose2",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        default=None,
                        help_text="What is the second dose?",
                        max_digits=5,
                        null=True,
                        verbose_name="Second Dose",
                    ),
                ),
                (
                    "dose3",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        default=None,
                        help_text="What is the third dose?",
                        max_digits=5,
                        null=True,
                        verbose_name="Third Dose",
                    ),
                ),
                (
                    "dose_adj",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="What is the standard dose adjustment?",
                        max_digits=5,
                        verbose_name="Dose Adjustment",
                    ),
                ),
                (
                    "max_dose",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="What is the maximum dose?",
                        max_digits=5,
                        verbose_name="Maximum Dose",
                    ),
                ),
                (
                    "duration",
                    models.DurationField(
                        blank=True,
                        default=None,
                        help_text="How long is the medication taken for?",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(datetime.timedelta(days=31)),
                            django.core.validators.MinValueValidator(datetime.timedelta(0)),
                        ],
                        verbose_name="Duration",
                    ),
                ),
                (
                    "duration2",
                    models.DurationField(
                        blank=True,
                        default=None,
                        help_text="How long is the second dose taken for??",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(datetime.timedelta(days=31)),
                            django.core.validators.MinValueValidator(datetime.timedelta(0)),
                        ],
                        verbose_name="Second Duration",
                    ),
                ),
                (
                    "duration3",
                    models.DurationField(
                        blank=True,
                        default=None,
                        help_text="How long is the third dose taken for?",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(datetime.timedelta(days=31)),
                            django.core.validators.MinValueValidator(datetime.timedelta(0)),
                        ],
                        verbose_name="Third Duration",
                    ),
                ),
                (
                    "freq",
                    models.CharField(
                        choices=[
                            ("BID", "Twice daily"),
                            ("BIW", "Twice weekly"),
                            ("ONCE", "Once"),
                            ("QDAY", "Daily"),
                            ("QID", "Four times daily"),
                            ("QOTHERDAY", "Every other day"),
                            ("QWEEK", "Weekly"),
                            ("TID", "Three times daily"),
                            ("TIW", "Three times weekly"),
                        ],
                        help_text="How often is this taken?",
                        max_length=50,
                        verbose_name="Frequency",
                    ),
                ),
                (
                    "freq2",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BID", "Twice daily"),
                            ("BIW", "Twice weekly"),
                            ("ONCE", "Once"),
                            ("QDAY", "Daily"),
                            ("QID", "Four times daily"),
                            ("QOTHERDAY", "Every other day"),
                            ("QWEEK", "Weekly"),
                            ("TID", "Three times daily"),
                            ("TIW", "Three times weekly"),
                        ],
                        default=None,
                        help_text="How often is the second dose taken?",
                        max_length=50,
                        null=True,
                        verbose_name="Second Frequency",
                    ),
                ),
                (
                    "freq3",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BID", "Twice daily"),
                            ("BIW", "Twice weekly"),
                            ("ONCE", "Once"),
                            ("QDAY", "Daily"),
                            ("QID", "Four times daily"),
                            ("QOTHERDAY", "Every other day"),
                            ("QWEEK", "Weekly"),
                            ("TID", "Three times daily"),
                            ("TIW", "Three times weekly"),
                        ],
                        default=None,
                        help_text="How often is the third dose taken?",
                        max_length=50,
                        null=True,
                        verbose_name="Third Frequency",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical default trt",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDefaultPpxTrtSettings",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "colch_ckd",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use renally-dosed colchicine in Ckd?",
                        verbose_name="Colchicine with Ckd",
                    ),
                ),
                (
                    "colch_dose_adjust",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="If colchicine will be adjusted for CKD, adjust dose? Otherwise will adjust frequency.",
                        verbose_name="Colchicine Dose vs Frequency Adjustment",
                    ),
                ),
                (
                    "ppxtrt1",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="NAPROXEN",
                        max_length=50,
                        verbose_name="Ppx Treatment Option 1",
                    ),
                ),
                (
                    "ppxtrt2",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="COLCHICINE",
                        max_length=50,
                        verbose_name="Ppx Treatment Option 2",
                    ),
                ),
                (
                    "ppxtrt3",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="PREDNISONE",
                        max_length=50,
                        verbose_name="Ppx Treatment Option 3",
                    ),
                ),
                (
                    "ppxtrt4",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="Ppx Treatment Option 4",
                    ),
                ),
                (
                    "ppxtrt5",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="Ppx Treatment Option 5",
                    ),
                ),
                (
                    "nsaid_age",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use NSAIDs after age 65?",
                        verbose_name="NSAIDs after age 65",
                    ),
                ),
                (
                    "nsaids_equivalent",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Treat all NSAIDs as equivalent?",
                        verbose_name="Treat all NSAIDs as equivalent?",
                    ),
                ),
                (
                    "pred_dm",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use low-dose steroids with diabetes?",
                        verbose_name="Steroids with Diabetes",
                    ),
                ),
                (
                    "steroids_equivalent",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Treat all corticosteroids as equivalent?",
                        verbose_name="Treat all corticosteroids as equivalent?",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical default ppx trt settings",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalDefaultFlareTrtSettings",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                ("id", models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                (
                    "colch_ckd",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use renally-dosed colchicine in Ckd?",
                        verbose_name="Colchicine with Ckd",
                    ),
                ),
                (
                    "colch_dose_adjust",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="If colchicine will be adjusted for CKD, adjust dose? Otherwise will adjust frequency.",
                        verbose_name="Colchicine Dose vs Frequency Adjustment",
                    ),
                ),
                (
                    "flaretrt1",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="NAPROXEN",
                        max_length=50,
                        verbose_name="Flare Treatment Option 1",
                    ),
                ),
                (
                    "flaretrt2",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="COLCHICINE",
                        max_length=50,
                        verbose_name="Flare Treatment Option 2",
                    ),
                ),
                (
                    "flaretrt3",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="PREDNISONE",
                        max_length=50,
                        verbose_name="Flare Treatment Option 3",
                    ),
                ),
                (
                    "flaretrt4",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="Flare Treatment Option 4",
                    ),
                ),
                (
                    "flaretrt5",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="Flare Treatment Option 5",
                    ),
                ),
                (
                    "nsaid_age",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use NSAIDs after age 65?",
                        verbose_name="NSAIDs after age 65",
                    ),
                ),
                (
                    "nsaids_equivalent",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Treat all NSAIDs as equivalent?",
                        verbose_name="Treat all NSAIDs as equivalent?",
                    ),
                ),
                (
                    "pred_dm",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use low-dose steroids with diabetes?",
                        verbose_name="Steroids with Diabetes",
                    ),
                ),
                (
                    "steroids_equivalent",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Treat all corticosteroids as equivalent?",
                        verbose_name="Treat all corticosteroids as equivalent?",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")], max_length=1),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical default flare trt settings",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="DefaultUltTrtSettings",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "allo_ckd_fixed_dose",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use fixed dose allopurinol in CKD?",
                        verbose_name="Allopurinol CKD Fixed Dose",
                    ),
                ),
                (
                    "allo_dialysis",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use allopurinol in dialysis?",
                        verbose_name="Allopurinol in Dialysis",
                    ),
                ),
                (
                    "allo_no_ethnicity_no_hlab5801",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use allopurinol without knowing ethnicity and HLA-B*5801?",
                        verbose_name="Allopurinol / without ethnicity / HLA-B*5801",
                    ),
                ),
                (
                    "allo_risk_ethnicity_no_hlab5801",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=False,
                        help_text="Use allopurinol in high risk ethnicity without HLA-B*5801?",
                        verbose_name="Allopurinol / high risk ethnicity / no HLA-B*5801",
                    ),
                ),
                (
                    "febu_ckd_initial_dose",
                    models.DecimalField(
                        decimal_places=1,
                        default=Decimal("20"),
                        help_text="What is initial febuxostat dose in CKD?",
                        max_digits=5,
                        verbose_name="Initial Febuxostat CKD Dose",
                    ),
                ),
                (
                    "febu_cv_disease",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use febuxostat in the setting of cardiovascular disease?",
                        verbose_name="Febuxostat with cardiovascular disease?",
                    ),
                ),
                (
                    "prob_ckd_stage_contra",
                    models.IntegerField(
                        choices=[(None, "----"), (1, "I"), (2, "II"), (3, "III"), (4, "IV"), (5, "V")],
                        default=3,
                        help_text="What is the CKD stage at which probenecid is contraindicated?",
                        verbose_name="Probenecid CKD Stage Contraindication",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="DefaultTrt",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "trttype",
                    models.IntegerField(
                        blank=True,
                        choices=[(0, "Urate-lowering therapy"), (1, "Flare"), (2, "Prophylaxis")],
                        help_text="What type of gout medication is this?",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                        verbose_name="Treatment Type",
                    ),
                ),
                (
                    "treatment",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        max_length=50,
                        null=True,
                        verbose_name="Treatment",
                    ),
                ),
                (
                    "dose",
                    models.DecimalField(
                        decimal_places=1, help_text="What is the dose?", max_digits=5, verbose_name="Dose"
                    ),
                ),
                (
                    "dose2",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        default=None,
                        help_text="What is the second dose?",
                        max_digits=5,
                        null=True,
                        verbose_name="Second Dose",
                    ),
                ),
                (
                    "dose3",
                    models.DecimalField(
                        blank=True,
                        decimal_places=1,
                        default=None,
                        help_text="What is the third dose?",
                        max_digits=5,
                        null=True,
                        verbose_name="Third Dose",
                    ),
                ),
                (
                    "dose_adj",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="What is the standard dose adjustment?",
                        max_digits=5,
                        verbose_name="Dose Adjustment",
                    ),
                ),
                (
                    "max_dose",
                    models.DecimalField(
                        decimal_places=1,
                        help_text="What is the maximum dose?",
                        max_digits=5,
                        verbose_name="Maximum Dose",
                    ),
                ),
                (
                    "duration",
                    models.DurationField(
                        blank=True,
                        default=None,
                        help_text="How long is the medication taken for?",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(datetime.timedelta(days=31)),
                            django.core.validators.MinValueValidator(datetime.timedelta(0)),
                        ],
                        verbose_name="Duration",
                    ),
                ),
                (
                    "duration2",
                    models.DurationField(
                        blank=True,
                        default=None,
                        help_text="How long is the second dose taken for??",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(datetime.timedelta(days=31)),
                            django.core.validators.MinValueValidator(datetime.timedelta(0)),
                        ],
                        verbose_name="Second Duration",
                    ),
                ),
                (
                    "duration3",
                    models.DurationField(
                        blank=True,
                        default=None,
                        help_text="How long is the third dose taken for?",
                        null=True,
                        validators=[
                            django.core.validators.MaxValueValidator(datetime.timedelta(days=31)),
                            django.core.validators.MinValueValidator(datetime.timedelta(0)),
                        ],
                        verbose_name="Third Duration",
                    ),
                ),
                (
                    "freq",
                    models.CharField(
                        choices=[
                            ("BID", "Twice daily"),
                            ("BIW", "Twice weekly"),
                            ("ONCE", "Once"),
                            ("QDAY", "Daily"),
                            ("QID", "Four times daily"),
                            ("QOTHERDAY", "Every other day"),
                            ("QWEEK", "Weekly"),
                            ("TID", "Three times daily"),
                            ("TIW", "Three times weekly"),
                        ],
                        help_text="How often is this taken?",
                        max_length=50,
                        verbose_name="Frequency",
                    ),
                ),
                (
                    "freq2",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BID", "Twice daily"),
                            ("BIW", "Twice weekly"),
                            ("ONCE", "Once"),
                            ("QDAY", "Daily"),
                            ("QID", "Four times daily"),
                            ("QOTHERDAY", "Every other day"),
                            ("QWEEK", "Weekly"),
                            ("TID", "Three times daily"),
                            ("TIW", "Three times weekly"),
                        ],
                        default=None,
                        help_text="How often is the second dose taken?",
                        max_length=50,
                        null=True,
                        verbose_name="Second Frequency",
                    ),
                ),
                (
                    "freq3",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("BID", "Twice daily"),
                            ("BIW", "Twice weekly"),
                            ("ONCE", "Once"),
                            ("QDAY", "Daily"),
                            ("QID", "Four times daily"),
                            ("QOTHERDAY", "Every other day"),
                            ("QWEEK", "Weekly"),
                            ("TID", "Three times daily"),
                            ("TIW", "Three times weekly"),
                        ],
                        default=None,
                        help_text="How often is the third dose taken?",
                        max_length=50,
                        null=True,
                        verbose_name="Third Frequency",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="DefaultPpxTrtSettings",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "colch_ckd",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use renally-dosed colchicine in Ckd?",
                        verbose_name="Colchicine with Ckd",
                    ),
                ),
                (
                    "colch_dose_adjust",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="If colchicine will be adjusted for CKD, adjust dose? Otherwise will adjust frequency.",
                        verbose_name="Colchicine Dose vs Frequency Adjustment",
                    ),
                ),
                (
                    "ppxtrt1",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="NAPROXEN",
                        max_length=50,
                        verbose_name="Ppx Treatment Option 1",
                    ),
                ),
                (
                    "ppxtrt2",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="COLCHICINE",
                        max_length=50,
                        verbose_name="Ppx Treatment Option 2",
                    ),
                ),
                (
                    "ppxtrt3",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="PREDNISONE",
                        max_length=50,
                        verbose_name="Ppx Treatment Option 3",
                    ),
                ),
                (
                    "ppxtrt4",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="Ppx Treatment Option 4",
                    ),
                ),
                (
                    "ppxtrt5",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="Ppx Treatment Option 5",
                    ),
                ),
                (
                    "nsaid_age",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use NSAIDs after age 65?",
                        verbose_name="NSAIDs after age 65",
                    ),
                ),
                (
                    "nsaids_equivalent",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Treat all NSAIDs as equivalent?",
                        verbose_name="Treat all NSAIDs as equivalent?",
                    ),
                ),
                (
                    "pred_dm",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use low-dose steroids with diabetes?",
                        verbose_name="Steroids with Diabetes",
                    ),
                ),
                (
                    "steroids_equivalent",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Treat all corticosteroids as equivalent?",
                        verbose_name="Treat all corticosteroids as equivalent?",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="DefaultMedHistory",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "contraindication",
                    models.IntegerField(
                        choices=[(0, "Absolute"), (1, "Relative"), (2, "Dose Adjustment Required")],
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                    ),
                ),
                (
                    "medhistorytype",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOLHYPERSENSITIVITY", "Allopurinol Hypersensitivity Syndrome"),
                            ("ANGINA", "Angina"),
                            ("ANTICOAGULATION", "Anticoagulation"),
                            ("BLEED", "Bleed"),
                            ("CAD", "Coronary Artery Disease"),
                            ("CHF", "Congestive Heart Failure"),
                            ("CKD", "Chronic Kidney Disease"),
                            ("COLCHICINEINTERACTION", "Colchicine Medication Interaction"),
                            ("DIABETES", "Diabetes"),
                            ("EROSIONS", "Erosions"),
                            ("FEBUXOSTATHYPERSENSITIVITY", "Febuxostat Hypersensitivity Syndrome"),
                            ("GASTRICBYPASS", "Gastric Bypass"),
                            ("GOUT", "Gout"),
                            ("HEARTATTACK", "Heart Attack"),
                            ("HYPERTENSION", "Hypertension"),
                            ("HYPERURICEMIA", "Hyperuricemia"),
                            ("IBD", "Inflammatory Bowel Disease"),
                            ("MENOPAUSE", "Post-Menopausal"),
                            ("ORGANTRANSPLANT", "Organ Transplant"),
                            ("OSTEOPOROSIS", "Osteoporosis"),
                            ("PVD", "Peripheral Vascular Disease"),
                            ("STROKE", "Stroke"),
                            ("TOPHI", "Tophi"),
                            ("URATESTONES", "Urate kidney stones"),
                            ("XOIINTERACTION", "Xanthine Oxidase Inhibitor Medication Interaction"),
                        ],
                        max_length=30,
                        verbose_name="History Type",
                    ),
                ),
                (
                    "treatment",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        max_length=50,
                        verbose_name="Treatment",
                    ),
                ),
                (
                    "trttype",
                    models.IntegerField(
                        choices=[(0, "Urate-lowering therapy"), (1, "Flare"), (2, "Prophylaxis")],
                        help_text="What type of gout medication is this?",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(2),
                        ],
                        verbose_name="Treatment Type",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name="DefaultFlareTrtSettings",
            fields=[
                (
                    "created",
                    django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name="created"),
                ),
                (
                    "modified",
                    django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name="modified"),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, unique=True
                    ),
                ),
                (
                    "colch_ckd",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use renally-dosed colchicine in Ckd?",
                        verbose_name="Colchicine with Ckd",
                    ),
                ),
                (
                    "colch_dose_adjust",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="If colchicine will be adjusted for CKD, adjust dose? Otherwise will adjust frequency.",
                        verbose_name="Colchicine Dose vs Frequency Adjustment",
                    ),
                ),
                (
                    "flaretrt1",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="NAPROXEN",
                        max_length=50,
                        verbose_name="Flare Treatment Option 1",
                    ),
                ),
                (
                    "flaretrt2",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="COLCHICINE",
                        max_length=50,
                        verbose_name="Flare Treatment Option 2",
                    ),
                ),
                (
                    "flaretrt3",
                    models.CharField(
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default="PREDNISONE",
                        max_length=50,
                        verbose_name="Flare Treatment Option 3",
                    ),
                ),
                (
                    "flaretrt4",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="Flare Treatment Option 4",
                    ),
                ),
                (
                    "flaretrt5",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("ALLOPURINOL", "Allopurinol"),
                            ("CELECOXIB", "Celecoxib"),
                            ("COLCHICINE", "Colchicine"),
                            ("DICLOFENAC", "Diclofenac"),
                            ("FEBUXOSTAT", "Febuxostat"),
                            ("IBUPROFEN", "Ibuprofen"),
                            ("INDOMETHACIN", "Indomethacin"),
                            ("MELOXICAM", "Meloxicam"),
                            ("METHYLPREDNISOLONE", "Methylprednisolone"),
                            ("NAPROXEN", "Naproxen"),
                            ("PREDNISONE", "Prednisone"),
                            ("PROBENECID", "Probenecid"),
                        ],
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="Flare Treatment Option 5",
                    ),
                ),
                (
                    "nsaid_age",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use NSAIDs after age 65?",
                        verbose_name="NSAIDs after age 65",
                    ),
                ),
                (
                    "nsaids_equivalent",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Treat all NSAIDs as equivalent?",
                        verbose_name="Treat all NSAIDs as equivalent?",
                    ),
                ),
                (
                    "pred_dm",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Use low-dose steroids with diabetes?",
                        verbose_name="Steroids with Diabetes",
                    ),
                ),
                (
                    "steroids_equivalent",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=True,
                        help_text="Treat all corticosteroids as equivalent?",
                        verbose_name="Treat all corticosteroids as equivalent?",
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            bases=(rules.contrib.models.RulesModelMixin, models.Model),
        ),
        migrations.AddConstraint(
            model_name="defaultulttrtsettings",
            constraint=models.UniqueConstraint(
                models.Q(("user__isnull", True)), name="defaults_defaultulttrtsettings_gouthelper_default"
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultulttrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "febu_ckd_initial_dose__in",
                        [Decimal("20"), Decimal("40"), Decimal("60"), Decimal("80"), Decimal("100"), Decimal("120")],
                    )
                ),
                name="defaults_defaultulttrtsettings_initial_febuxostat_dose_ckd",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultulttrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(("prob_ckd_stage_contra__in", [None, 1, 2, 3, 4, 5])),
                name="defaults_defaultulttrtsettings_prob_ckd_contra_stage_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "treatment__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaulttrt_treatment_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(("trttype__in", [0, 1, 2])), name="defaults_defaulttrt_trttype_valid"
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("treatment", "ALLOPURINOL"), ("trttype", 0)),
                    models.Q(("treatment", "FEBUXOSTAT"), ("trttype", 0)),
                    models.Q(("treatment", "PROBENECID"), ("trttype", 0)),
                    models.Q(("treatment", "CELECOXIB"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "COLCHICINE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "DICLOFENAC"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "IBUPROFEN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "INDOMETHACIN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "MELOXICAM"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(
                        ("treatment", "METHYLPREDNISOLONE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")
                    ),
                    models.Q(("treatment", "NAPROXEN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "PREDNISONE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_trttype_treatment_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.UniqueConstraint(
                fields=("user", "treatment", "trttype"), name="unique_user_trt_default"
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.UniqueConstraint(
                condition=models.Q(("user__isnull", True)),
                fields=("treatment", "trttype"),
                name="defaults_defaulttrt_gouthelper_default",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("freq__in", ["BID", "BIW", "ONCE", "QDAY", "QID", "QOTHERDAY", "QWEEK", "TID", "TIW"])
                ),
                name="defaults_defaulttrt_freq_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("freq2__in", ["BID", "BIW", "ONCE", "QDAY", "QID", "QOTHERDAY", "QWEEK", "TID", "TIW"]),
                    ("freq2", None),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_freq2_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("freq3__in", ["BID", "BIW", "ONCE", "QDAY", "QID", "QOTHERDAY", "QWEEK", "TID", "TIW"]),
                    ("freq3", None),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_freq3_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(models.Q(("trttype", 0), ("trttype", 2), _connector="OR"), ("duration", None)),
                    models.Q(("trttype", 1), models.Q(("duration", None), _negated=True)),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_duration_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(models.Q(("trttype", 0), ("trttype", 2), _connector="OR"), ("duration2", None)),
                    ("trttype", 1),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_duration2_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(models.Q(("trttype", 0), ("trttype", 2), _connector="OR"), ("duration3", None)),
                    ("trttype", 1),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_duration3_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("dose__lte", models.F("max_dose")),
                    models.Q(("dose2__lte", models.F("max_dose")), ("dose2", None), _connector="OR"),
                    models.Q(("dose3__lte", models.F("max_dose")), ("dose3", None), _connector="OR"),
                ),
                name="defaults_defaulttrt_doses_under_max_dose",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaulttrt",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(
                        ("treatment", "ALLOPURINOL"),
                        (
                            "dose__in",
                            [
                                Decimal("50"),
                                Decimal("100"),
                                Decimal("150"),
                                Decimal("200"),
                                Decimal("250"),
                                Decimal("300"),
                                Decimal("350"),
                                Decimal("400"),
                                Decimal("450"),
                                Decimal("500"),
                                Decimal("550"),
                                Decimal("600"),
                                Decimal("650"),
                                Decimal("700"),
                                Decimal("750"),
                                Decimal("800"),
                            ],
                        ),
                        models.Q(
                            (
                                "dose2__in",
                                [
                                    Decimal("50"),
                                    Decimal("100"),
                                    Decimal("150"),
                                    Decimal("200"),
                                    Decimal("250"),
                                    Decimal("300"),
                                    Decimal("350"),
                                    Decimal("400"),
                                    Decimal("450"),
                                    Decimal("500"),
                                    Decimal("550"),
                                    Decimal("600"),
                                    Decimal("650"),
                                    Decimal("700"),
                                    Decimal("750"),
                                    Decimal("800"),
                                ],
                            ),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            (
                                "dose3__in",
                                [
                                    Decimal("50"),
                                    Decimal("100"),
                                    Decimal("150"),
                                    Decimal("200"),
                                    Decimal("250"),
                                    Decimal("300"),
                                    Decimal("350"),
                                    Decimal("400"),
                                    Decimal("450"),
                                    Decimal("500"),
                                    Decimal("550"),
                                    Decimal("600"),
                                    Decimal("650"),
                                    Decimal("700"),
                                    Decimal("750"),
                                    Decimal("800"),
                                ],
                            ),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        (
                            "dose_adj__in",
                            [
                                Decimal("50"),
                                Decimal("100"),
                                Decimal("150"),
                                Decimal("200"),
                                Decimal("250"),
                                Decimal("300"),
                                Decimal("350"),
                                Decimal("400"),
                                Decimal("450"),
                                Decimal("500"),
                                Decimal("550"),
                                Decimal("600"),
                                Decimal("650"),
                                Decimal("700"),
                                Decimal("750"),
                                Decimal("800"),
                            ],
                        ),
                        (
                            "max_dose__in",
                            [
                                Decimal("50"),
                                Decimal("100"),
                                Decimal("150"),
                                Decimal("200"),
                                Decimal("250"),
                                Decimal("300"),
                                Decimal("350"),
                                Decimal("400"),
                                Decimal("450"),
                                Decimal("500"),
                                Decimal("550"),
                                Decimal("600"),
                                Decimal("650"),
                                Decimal("700"),
                                Decimal("750"),
                                Decimal("800"),
                            ],
                        ),
                    ),
                    models.Q(
                        ("treatment", "CELECOXIB"),
                        ("dose__in", [Decimal("200"), Decimal("400")]),
                        models.Q(("dose2__in", [Decimal("200"), Decimal("400")]), ("dose2", None), _connector="OR"),
                        models.Q(("dose3__in", [Decimal("200"), Decimal("400")]), ("dose3", None), _connector="OR"),
                        ("dose_adj__in", [Decimal("200"), Decimal("400")]),
                        ("max_dose__in", [Decimal("200"), Decimal("400")]),
                    ),
                    models.Q(
                        ("treatment", "COLCHICINE"),
                        ("dose__in", [Decimal("0.3"), Decimal("0.6"), Decimal("1.2")]),
                        models.Q(
                            ("dose2__in", [Decimal("0.3"), Decimal("0.6"), Decimal("1.2")]),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            ("dose3__in", [Decimal("0.3"), Decimal("0.6"), Decimal("1.2")]),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        ("dose_adj__in", [Decimal("0.3"), Decimal("0.6"), Decimal("1.2")]),
                        ("max_dose__in", [Decimal("0.3"), Decimal("0.6"), Decimal("1.2")]),
                    ),
                    models.Q(
                        ("treatment", "DICLOFENAC"),
                        ("dose__in", [Decimal("25"), Decimal("50"), Decimal("75"), Decimal("100"), Decimal("150")]),
                        models.Q(
                            (
                                "dose2__in",
                                [Decimal("25"), Decimal("50"), Decimal("75"), Decimal("100"), Decimal("150")],
                            ),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            (
                                "dose3__in",
                                [Decimal("25"), Decimal("50"), Decimal("75"), Decimal("100"), Decimal("150")],
                            ),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        (
                            "dose_adj__in",
                            [Decimal("25"), Decimal("50"), Decimal("75"), Decimal("100"), Decimal("150")],
                        ),
                        (
                            "max_dose__in",
                            [Decimal("25"), Decimal("50"), Decimal("75"), Decimal("100"), Decimal("150")],
                        ),
                    ),
                    models.Q(
                        ("treatment", "FEBUXOSTAT"),
                        (
                            "dose__in",
                            [
                                Decimal("20"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                                Decimal("100"),
                                Decimal("120"),
                            ],
                        ),
                        models.Q(
                            (
                                "dose2__in",
                                [
                                    Decimal("20"),
                                    Decimal("40"),
                                    Decimal("60"),
                                    Decimal("80"),
                                    Decimal("100"),
                                    Decimal("120"),
                                ],
                            ),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            (
                                "dose3__in",
                                [
                                    Decimal("20"),
                                    Decimal("40"),
                                    Decimal("60"),
                                    Decimal("80"),
                                    Decimal("100"),
                                    Decimal("120"),
                                ],
                            ),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        (
                            "dose_adj__in",
                            [
                                Decimal("20"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                                Decimal("100"),
                                Decimal("120"),
                            ],
                        ),
                        (
                            "max_dose__in",
                            [
                                Decimal("20"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                                Decimal("100"),
                                Decimal("120"),
                            ],
                        ),
                    ),
                    models.Q(
                        ("treatment", "IBUPROFEN"),
                        ("dose__in", [Decimal("200"), Decimal("400"), Decimal("600"), Decimal("800")]),
                        models.Q(
                            ("dose2__in", [Decimal("200"), Decimal("400"), Decimal("600"), Decimal("800")]),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            ("dose3__in", [Decimal("200"), Decimal("400"), Decimal("600"), Decimal("800")]),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        ("dose_adj__in", [Decimal("200"), Decimal("400"), Decimal("600"), Decimal("800")]),
                        ("max_dose__in", [Decimal("200"), Decimal("400"), Decimal("600"), Decimal("800")]),
                    ),
                    models.Q(
                        ("treatment", "INDOMETHACIN"),
                        ("dose__in", [Decimal("25"), Decimal("50")]),
                        models.Q(("dose2__in", [Decimal("25"), Decimal("50")]), ("dose2", None), _connector="OR"),
                        models.Q(("dose3__in", [Decimal("25"), Decimal("50")]), ("dose3", None), _connector="OR"),
                        ("dose_adj__in", [Decimal("25"), Decimal("50")]),
                        ("max_dose__in", [Decimal("25"), Decimal("50")]),
                    ),
                    models.Q(
                        ("treatment", "MELOXICAM"),
                        ("dose__in", [Decimal("7.5"), Decimal("15")]),
                        models.Q(("dose2__in", [Decimal("7.5"), Decimal("15")]), ("dose2", None), _connector="OR"),
                        models.Q(("dose3__in", [Decimal("7.5"), Decimal("15")]), ("dose3", None), _connector="OR"),
                        ("dose_adj__in", [Decimal("7.5"), Decimal("15")]),
                        ("max_dose__in", [Decimal("7.5"), Decimal("15")]),
                    ),
                    models.Q(
                        ("treatment", "METHYLPREDNISOLONE"),
                        (
                            "dose__in",
                            [
                                Decimal("4"),
                                Decimal("8"),
                                Decimal("16"),
                                Decimal("20"),
                                Decimal("24"),
                                Decimal("32"),
                                Decimal("40"),
                                Decimal("80"),
                            ],
                        ),
                        models.Q(
                            (
                                "dose2__in",
                                [
                                    Decimal("4"),
                                    Decimal("8"),
                                    Decimal("16"),
                                    Decimal("20"),
                                    Decimal("24"),
                                    Decimal("32"),
                                    Decimal("40"),
                                    Decimal("80"),
                                ],
                            ),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            (
                                "dose3__in",
                                [
                                    Decimal("4"),
                                    Decimal("8"),
                                    Decimal("16"),
                                    Decimal("20"),
                                    Decimal("24"),
                                    Decimal("32"),
                                    Decimal("40"),
                                    Decimal("80"),
                                ],
                            ),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        (
                            "dose_adj__in",
                            [
                                Decimal("4"),
                                Decimal("8"),
                                Decimal("16"),
                                Decimal("20"),
                                Decimal("24"),
                                Decimal("32"),
                                Decimal("40"),
                                Decimal("80"),
                            ],
                        ),
                        (
                            "max_dose__in",
                            [
                                Decimal("4"),
                                Decimal("8"),
                                Decimal("16"),
                                Decimal("20"),
                                Decimal("24"),
                                Decimal("32"),
                                Decimal("40"),
                                Decimal("80"),
                            ],
                        ),
                    ),
                    models.Q(
                        ("treatment", "NAPROXEN"),
                        ("dose__in", [Decimal("220"), Decimal("250"), Decimal("440"), Decimal("500")]),
                        models.Q(
                            ("dose2__in", [Decimal("220"), Decimal("250"), Decimal("440"), Decimal("500")]),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            ("dose3__in", [Decimal("220"), Decimal("250"), Decimal("440"), Decimal("500")]),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        ("dose_adj__in", [Decimal("220"), Decimal("250"), Decimal("440"), Decimal("500")]),
                        ("max_dose__in", [Decimal("220"), Decimal("250"), Decimal("440"), Decimal("500")]),
                    ),
                    models.Q(
                        ("treatment", "PREDNISONE"),
                        (
                            "dose__in",
                            [
                                Decimal("2.5"),
                                Decimal("5"),
                                Decimal("10"),
                                Decimal("15"),
                                Decimal("20"),
                                Decimal("30"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                            ],
                        ),
                        models.Q(
                            (
                                "dose2__in",
                                [
                                    Decimal("2.5"),
                                    Decimal("5"),
                                    Decimal("10"),
                                    Decimal("15"),
                                    Decimal("20"),
                                    Decimal("30"),
                                    Decimal("40"),
                                    Decimal("60"),
                                    Decimal("80"),
                                ],
                            ),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            (
                                "dose3__in",
                                [
                                    Decimal("2.5"),
                                    Decimal("5"),
                                    Decimal("10"),
                                    Decimal("15"),
                                    Decimal("20"),
                                    Decimal("30"),
                                    Decimal("40"),
                                    Decimal("60"),
                                    Decimal("80"),
                                ],
                            ),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        (
                            "dose_adj__in",
                            [
                                Decimal("2.5"),
                                Decimal("5"),
                                Decimal("10"),
                                Decimal("15"),
                                Decimal("20"),
                                Decimal("30"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                            ],
                        ),
                        (
                            "max_dose__in",
                            [
                                Decimal("2.5"),
                                Decimal("5"),
                                Decimal("10"),
                                Decimal("15"),
                                Decimal("20"),
                                Decimal("30"),
                                Decimal("40"),
                                Decimal("60"),
                                Decimal("80"),
                            ],
                        ),
                    ),
                    models.Q(
                        ("treatment", "PROBENECID"),
                        ("dose__in", [Decimal("250"), Decimal("500"), Decimal("750"), Decimal("1000")]),
                        models.Q(
                            ("dose2__in", [Decimal("250"), Decimal("500"), Decimal("750"), Decimal("1000")]),
                            ("dose2", None),
                            _connector="OR",
                        ),
                        models.Q(
                            ("dose3__in", [Decimal("250"), Decimal("500"), Decimal("750"), Decimal("1000")]),
                            ("dose3", None),
                            _connector="OR",
                        ),
                        ("dose_adj__in", [Decimal("250"), Decimal("500"), Decimal("750"), Decimal("1000")]),
                        ("max_dose__in", [Decimal("250"), Decimal("500"), Decimal("750"), Decimal("1000")]),
                    ),
                    _connector="OR",
                ),
                name="defaults_defaulttrt_dosing_check",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultppxtrtsettings",
            constraint=models.UniqueConstraint(
                models.Q(("user__isnull", True)), name="defaults_defaultppxtrtsettings_gouthelper_default"
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultppxtrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "ppxtrt1__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultppxtrtsettings_ppxtrt1_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultppxtrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "ppxtrt2__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultppxtrtsettings_ppxtrt2_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultppxtrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "ppxtrt3__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultppxtrtsettings_ppxtrt3_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultppxtrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "ppxtrt4__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultppxtrtsettings_ppxtrt4_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultppxtrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "ppxtrt5__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultppxtrtsettings_ppxtrt5_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.UniqueConstraint(
                fields=("user", "contraindication", "medhistorytype", "treatment", "trttype"),
                name="defaults_defaultmedhistory_unique_user_sideeffect_default",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.UniqueConstraint(
                condition=models.Q(("user__isnull", True)),
                fields=("contraindication", "medhistorytype", "treatment", "trttype"),
                name="defaults_defaultmedhistory_gouthelper_default",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.CheckConstraint(
                check=models.Q(("contraindication__in", [0, 1, 2])),
                name="defaults_defaultmedhistory_contraindication_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "medhistorytype__in",
                        [
                            "ALLOPURINOLHYPERSENSITIVITY",
                            "ANGINA",
                            "ANTICOAGULATION",
                            "BLEED",
                            "CAD",
                            "CHF",
                            "CKD",
                            "COLCHICINEINTERACTION",
                            "DIABETES",
                            "EROSIONS",
                            "FEBUXOSTATHYPERSENSITIVITY",
                            "GASTRICBYPASS",
                            "GOUT",
                            "HEARTATTACK",
                            "HYPERTENSION",
                            "HYPERURICEMIA",
                            "IBD",
                            "MENOPAUSE",
                            "ORGANTRANSPLANT",
                            "OSTEOPOROSIS",
                            "PVD",
                            "STROKE",
                            "TOPHI",
                            "URATESTONES",
                            "XOIINTERACTION",
                        ],
                    )
                ),
                name="defaults_defaultmedhistory_medhistorytype_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "treatment__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultmedhistory_treatment_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.CheckConstraint(
                check=models.Q(("trttype__in", [0, 1, 2])), name="defaults_defaultmedhistory_trttype_valid"
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultmedhistory",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("treatment", "ALLOPURINOL"), ("trttype", 0)),
                    models.Q(("treatment", "FEBUXOSTAT"), ("trttype", 0)),
                    models.Q(("treatment", "PROBENECID"), ("trttype", 0)),
                    models.Q(("treatment", "CELECOXIB"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "COLCHICINE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "DICLOFENAC"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "IBUPROFEN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "INDOMETHACIN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "MELOXICAM"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(
                        ("treatment", "METHYLPREDNISOLONE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")
                    ),
                    models.Q(("treatment", "NAPROXEN"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    models.Q(("treatment", "PREDNISONE"), models.Q(("trttype", 1), ("trttype", 2), _connector="OR")),
                    _connector="OR",
                ),
                name="defaults_defaultmedhistory_trttype_treatment_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultflaretrtsettings",
            constraint=models.UniqueConstraint(
                models.Q(("user__isnull", True)), name="defaults_defaultflaretrtsettings_gouthelper_default"
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultflaretrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "flaretrt1__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultflaretrtsettings_flaretrt1_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultflaretrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "flaretrt2__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultflaretrtsettings_flaretrt2_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultflaretrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "flaretrt3__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultflaretrtsettings_flaretrt3_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultflaretrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "flaretrt4__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultflaretrtsettings_flaretrt4_valid",
            ),
        ),
        migrations.AddConstraint(
            model_name="defaultflaretrtsettings",
            constraint=models.CheckConstraint(
                check=models.Q(
                    (
                        "flaretrt5__in",
                        [
                            "ALLOPURINOL",
                            "CELECOXIB",
                            "COLCHICINE",
                            "DICLOFENAC",
                            "FEBUXOSTAT",
                            "IBUPROFEN",
                            "INDOMETHACIN",
                            "MELOXICAM",
                            "METHYLPREDNISOLONE",
                            "NAPROXEN",
                            "PREDNISONE",
                            "PROBENECID",
                        ],
                    )
                ),
                name="defaults_defaultflaretrtsettings_flaretrt5_valid",
            ),
        ),
    ]
